name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggert bei Tags wie v1.0.0, v1.2.3, etc.

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller
        
    - name: Build Windows EXE
      run: |
        # Clean previous builds
        if (Test-Path dist) { Remove-Item -Recurse -Force dist }
        if (Test-Path build) { Remove-Item -Recurse -Force build }
        
        # Use spec file to ensure only EXE is created
        pyinstaller Aufsichtsplan.spec
      shell: pwsh
      
    - name: Create version info
      run: |
        $version = "${env:GITHUB_REF}" -replace "refs/tags/v", ""
        $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $versionInfo = @"
        {
          "version": "$version",
          "build_date": "$buildDate",
          "commit": "${env:GITHUB_SHA}",
          "download_url": "https://github.com/${env:GITHUB_REPOSITORY}/releases/download/v$version/Aufsichtsplan.exe"
        }
        "@
        $versionInfo | Out-File -FilePath "version.json" -Encoding UTF8
        echo "VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh
      
    - name: Calculate checksums
      run: |
        $hash = Get-FileHash -Path "dist/Aufsichtsplan.exe" -Algorithm SHA256
        $hash.Hash + "  Aufsichtsplan.exe" | Out-File -FilePath "checksums.txt" -Encoding ASCII
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ env.VERSION }}
        body: |
          ## Aufsichtsplan ${{ env.VERSION }}
          
          ### Downloads
          - **Windows**: [Aufsichtsplan.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Aufsichtsplan.exe)
          
          ### Installation
          1. Laden Sie die `Aufsichtsplan.exe` herunter
          2. Führen Sie die Datei aus (Windows Defender Warnung kann ignoriert werden)
          3. Die Anwendung öffnet automatisch den Browser
          
          ### Änderungen
          Automatisch erstelltes Release vom Commit ${{ github.sha }}
          
          **Vollständige Änderungen**: [${{ github.event.before }}...${{ github.sha }}](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
        draft: false
        prerelease: false
        
    - name: Upload EXE
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Aufsichtsplan.exe
        asset_name: Aufsichtsplan.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
        
    - name: Upload Version Info
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./version.json
        asset_name: version.json
        asset_content_type: application/json
