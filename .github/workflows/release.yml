name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggert bei Tags wie v1.0.0, v1.2.3, etc.

# Permissions für Release-Erstellung
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller
        
    - name: Build Windows EXE
      run: |
        # Clean previous builds
        if (Test-Path dist) { Remove-Item -Recurse -Force dist }
        if (Test-Path build) { Remove-Item -Recurse -Force build }
        
        # Build EXE directly with explicit onefile flag
        pyinstaller --onefile --noconsole `
          --name Aufsichtsplan `
          --add-data "app/templates;app/templates" `
          --add-data "app/static;app/static" `
          --distpath dist `
          --workpath build `
          start.py
        
        # Debug: Show what was actually created
        Write-Host "=== Build Results ==="
        Write-Host "Contents of dist directory:"
        if (Test-Path dist) {
            Get-ChildItem dist -Recurse | Format-Table Name, Length, FullName
        } else {
            Write-Host "dist directory does not exist!"
        }
        
        Write-Host "Contents of build directory:"
        if (Test-Path build) {
            Get-ChildItem build -Recurse -Directory | Select-Object -First 5 | Format-Table Name, FullName
        } else {
            Write-Host "build directory does not exist!"
        }
        
        # Verify only the EXE exists in dist
        $exeFiles = Get-ChildItem dist -Filter "*.exe" -Recurse
        Write-Host "Found $($exeFiles.Count) EXE file(s):"
        $exeFiles | Format-Table Name, Length, Directory
        
        # Clean up - remove any unwanted artifacts
        Write-Host "=== Cleanup ==="
        Get-ChildItem dist | Where-Object { $_.Name -ne "Aufsichtsplan.exe" } | ForEach-Object {
            Write-Host "Removing unwanted file/folder: $($_.Name)"
            Remove-Item $_.FullName -Recurse -Force
        }
        
        # Final verification
        Write-Host "Final dist contents:"
        Get-ChildItem dist | Format-Table Name, Length
      shell: pwsh
      
    - name: Upload build artifact (single EXE only)
      uses: actions/upload-artifact@v4
      with:
        name: aufsichtsplan-windows
        path: dist/Aufsichtsplan.exe
        retention-days: 1
      
    - name: Create version info
      run: |
        $version = "${env:GITHUB_REF}" -replace "refs/tags/v", ""
        $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $versionInfo = @"
        {
          "version": "$version",
          "build_date": "$buildDate",
          "commit": "${env:GITHUB_SHA}",
          "download_url": "https://github.com/${env:GITHUB_REPOSITORY}/releases/download/v$version/Aufsichtsplan.exe"
        }
        "@
        $versionInfo | Out-File -FilePath "version.json" -Encoding UTF8
        echo "VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh
      
    - name: Calculate checksums
      run: |
        $hash = Get-FileHash -Path "dist/Aufsichtsplan.exe" -Algorithm SHA256
        $hash.Hash + "  Aufsichtsplan.exe" | Out-File -FilePath "checksums.txt" -Encoding ASCII
      shell: pwsh
      
    - name: Debug - List files before release
      run: |
        Write-Host "=== Files for Release ==="
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "EXE exists: $(Test-Path 'dist/Aufsichtsplan.exe')"
        Write-Host "Checksums exists: $(Test-Path 'checksums.txt')"
        Write-Host "Version JSON exists: $(Test-Path 'version.json')"
        Write-Host "GitHub ref: ${{ github.ref }}"
        Write-Host "GitHub ref name: ${{ github.ref_name }}"
        Write-Host "VERSION env: $env:VERSION"
        
        if (Test-Path 'dist/Aufsichtsplan.exe') {
          $exeSize = (Get-Item 'dist/Aufsichtsplan.exe').Length
          Write-Host "EXE size: $exeSize bytes"
        }
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: "Aufsichtsplan ${{ env.VERSION }}"
        body: |
          ## Aufsichtsplan ${{ env.VERSION }}
          
          ### Downloads
          - **Windows**: [Aufsichtsplan.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Aufsichtsplan.exe)
          
          ### Installation
          1. Laden Sie die `Aufsichtsplan.exe` herunter
          2. Führen Sie die Datei aus (Windows Defender Warnung kann ignoriert werden)
          3. Die Anwendung öffnet automatisch den Browser
          
          ### Änderungen
          Automatisch erstelltes Release vom Commit ${{ github.sha }}
          
          **Vollständige Änderungen**: [${{ github.event.before }}...${{ github.sha }}](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
        draft: false
        prerelease: true
        files: |
          dist/Aufsichtsplan.exe
          checksums.txt
          version.json
        fail_on_unmatched_files: false
        generate_release_notes: false

